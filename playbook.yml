---
- hosts: local
  connection: local
  gather_facts: False
  vars:
    ansible_python_interpreter: /usr/bin/python3
    instance_type: t3.small
    security_group: ubuntu-web
    image: ami-0b418580298265d5c
    keypair: traffic-terminal-test
    region: eu-central-1
    count: 1
    elastic_ip: "18.156.72.250"
  vars_files:
    - aws_keys.yml
  tasks:
    - name: Create a security group
      ec2_group:
        name: "{{ security_group }}"
        description: The webservers security group
        region: "{{ region }}"
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
        rules_egress:
          - proto: all
            cidr_ip: 0.0.0.0/0

    - name: Launch the new EC2 Instance
      ec2:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        group: "{{ security_group }}"
        instance_type: "{{ instance_type }}"
        image: "{{ image }}"
        wait: true
        region: "{{ region }}"
        keypair: "{{ keypair }}"
        count: "{{ count }}"
      register: ec2
    - debug: var=ec2

    - name: Add tag to Instance(s)
      ec2_tag:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        resource: "{{ item.id }}"
        region: "{{ region }}"
        state: "present"
      with_items: "{{ ec2.instances }}"
      args:
        tags:
          Type: webserver
          Name: WordPress-Nginx

    - name: associate an elastic IP with an instance
      ec2_eip:
        aws_access_key: "{{ aws_access_key }}"
        aws_secret_key: "{{ aws_secret_key }}"
        device_id: "{{ item.id }}"
        ip: "{{ elastic_ip }}"
        private_ip_address: "{{ item.private_ip }}"
        allow_reassociation: yes
        region: "{{ region }}"
      with_items: "{{ ec2.instances }}"

    - name: Add the newly created host so that we can further contact it
      add_host:
        name: "{{ elastic_ip }}"
        groups: webservers
      #with_items: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ elastic_ip }}"
        port: 22
        state: started
      #with_items: "{{ ec2.instances }}"

- hosts: webservers
  connection: ssh
  become_method: sudo
  remote_user: ubuntu
  become: yes
  gather_facts: no
  vars:
      ansible_python_interpreter: /usr/bin/python3
  vars_files:
    - vars-web.yml
  pre_tasks:
    - name: 'install python'
      raw: 'sudo apt-get -y update && sudo apt-get -y upgrade && sudo apt-get -y install python3 python3-apt'
  tasks:
    - name: Install aptitude using apt
      apt:
        name: aptitude
        state: present
        update_cache: yes
        force_apt_get: yes
    - name: Upgrade System
      apt: upgrade=dist update_cache=yes

    - name: Install Packages
      apt: name={{ item }} update_cache=yes state=present
      loop: [ 'nginx', 'mysql-server', 'python3-pymysql', 'php', 'php-mysql', 'php-fpm' ]

    - name: Install PHP Extensions
      apt: name={{ item }} update_cache=yes state=present
      loop: "{{ php_modules }}"

    - name: Create document root
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        owner: "www-data"
        group: "www-data"
        mode: '0755'

    - name: Start Nginx
      service:
        name: nginx
        state: started
        enabled: yes

    - name: Start PHP-FPM
      service:
        name: php7.2-fpm
        state: started
        enabled: yes

    - name: Set up Wordpress VirtualHost
      template:
        src: "./files/nginx.conf.j2"
        dest: "/etc/nginx/sites-available/{{ http_conf }}"
#      notify: Reload Nginx

    - name: create symlink
      file:
        src: "/etc/nginx/sites-available/{{ http_conf }}"
        dest: "/etc/nginx/sites-enabled/{{ http_conf }}"
        state: link
      become: yes

  # MySQL Configuration
    - name: Set the root password
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/run/mysqld/mysqld.sock
      tags: [ mysql, mysql-root ]

    - name: Remove all anonymous user accounts
      mysql_user:
        name: ''
        host_all: yes
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Remove the MySQL test database
      mysql_db:
        name: test
        state: absent
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Creates database for WordPress
      mysql_db:
        name: "{{ mysql_db }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

    - name: Create MySQL user for WordPress
      mysql_user:
        name: "{{ mysql_user }}"
        password: "{{ mysql_password }}"
        priv: "{{ mysql_db }}.*:ALL"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"
      tags: [ mysql ]

  # WordPress Configuration
    - name: Download and unpack latest WordPress
      unarchive:
        src: https://wordpress.org/latest.tar.gz
        dest: "/var/www/{{ http_host }}"
        remote_src: yes
        creates: "/var/www/{{ http_host }}/wordpress"
      tags: [ wordpress ]

    - name: Set ownership
      file:
        path: "/var/www/{{ http_host }}"
        state: directory
        recurse: yes
        owner: www-data
        group: www-data
      tags: [ wordpress ]

    - name: Set permissions for directories
      shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type d -exec chmod 750 {} \\;"
      tags: [ wordpress ]

    - name: Set permissions for files
      shell: "/usr/bin/find /var/www/{{ http_host }}/wordpress/ -type f -exec chmod 640 {} \\;"
      tags: [ wordpress ]

    - name: Set up wp-config
      template:
        src: "files/wp-config.php.j2"
        dest: "/var/www/{{ http_host }}/wordpress/wp-config.php"
      tags: [ wordpress ]

    - name: remove default nginx default
      file: path=/etc/nginx/sites-enabled/default state=absent
    - name: restart nginx

      service:
        name: nginx
        state: restarted
      become: yes

# Add USER
    - name: Add a new user
      user:
        name: "{{ user_name }}"
        shell: /bin/bash
        password: "{{ user_password }}"

    - name: Add new user to the sudoers
      copy:
        dest: "/etc/sudoers.d/{{ user_name }}"
        content: "{{ user_name }} ALL=(ALL)  NOPASSWD: ALL"

    - name: Deploy SSH Key for new user
      authorized_key:
        user: "{{ user_name }}"
        key: "{{ lookup('file', './user_key_file') }}"
        state: present

    - name: Disable Password Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: "PasswordAuthentication no"
        state: present
        backup: yes

    - name: Disable Root Login
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PermitRootLogin'
        line: "PermitRootLogin no"
        state: present
        backup: yes

    - name: Restart sshd
      service:
        name: sshd
        state: restarted
        enabled: yes

# Letsencrypt deploy
    - name: Add certbot repository
      apt_repository:
        repo: 'ppa:certbot/certbot'

    - name: Install Certbot's Nginx package
      apt:
        name: python-certbot-nginx
        state: present

    - name: Check if certificate already exists.
      stat:
        path: /etc/letsencrypt/live/{{ item.servername }}/cert.pem
      register: letsencrypt_cert
      with_items: "{{ nginx_vhosts }}"

    - name: Generate new certificate if one doesn't exist.
      shell: "certbot run --nginx --noninteractive --agree-tos --email {{ certbot_admin_email }} -d {{ item.item.servername }} --redirect"
      with_items: "{{ letsencrypt_cert.results }}"
      when: item.stat.exists == False